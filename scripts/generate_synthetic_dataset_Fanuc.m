% generate_synthetic_dataset_Fanuc.m
% Generates HRC_Synthetic_Dataset_Fanuc.parquet and HRC_Simulation_Results_Fanuc.csv
% for the Fanuc study of auction-based task allocation.

% Simulation parameters
numEpisodes       = 1000;    % number of independent simulation runs
cyclesPerEpisode  = 2500;    % number of auction cycles per episode
fatigueMu         = 0.5;     % mean fatigue level
fatigueSigma      = 0.12;    % fatigue standard deviation
taskTimeMu        = 10;      % mean robot execution time (s)
taskTimeSigma     = 2;       % robot execution time std (s)

rng(12345, 'twister');       % global random seed for reproducibility

for ep = 1:numEpisodes
    % Preallocate per-episode vectors
    cycleIndex    = (1:cyclesPerEpisode)';  
    fatigueLevel  = max(0, min(1, normrnd(fatigueMu, fatigueSigma, cyclesPerEpisode, 1)));
    skillLevel    = randi([0, 2], cyclesPerEpisode, 1);  % 0=novice,1=intermediate,2=expert
    robotTime     = max(0, normrnd(taskTimeMu, taskTimeSigma, cyclesPerEpisode, 1));
    collisionFlag = rand(cyclesPerEpisode, 1) < 0.0015;  % â‰ˆ0.15% collision probability
    method        = repmat("Auction", cyclesPerEpisode, 1);

    % Assign Action: "Robot" or "Human" (60% Robot, 40% Human)
    rng(ep);  % seed per episode for repeatability
    action       = repmat("Human", cyclesPerEpisode, 1);
    isRobot      = rand(cyclesPerEpisode, 1) < 0.6;
    action(isRobot) = "Robot";

    % Create a table for this episode
    T = table( ...
        repmat(ep, cyclesPerEpisode, 1), ...
        cycleIndex, ...
        fatigueLevel, ...
        skillLevel, ...
        robotTime, ...
        collisionFlag, ...
        method, ...
        action, ...
        'VariableNames', { ...
            'Episode', ...
            'Cycle', ...
            'Fatigue', ...
            'Skill', ...
            'RobotTime', ...
            'CollisionFlag', ...
            'Method', ...
            'Action' ...
        } ...
    );

    % Concatenate into the master results table
    if ep == 1
        results = T;            % initialize on first iteration
    else
        results = [results; T]; % append subsequent episodes
    end
end

% Save results to CSV and Parquet for analysis and archiving
writetable(results, 'HRC_Simulation_Results_Fanuc.csv');
parquetwrite('HRC_Synthetic_Dataset_Fanuc.parquet', results);
